# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthPayload {
  token: String!
  expires: String!
  user: User!
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  createUser(entityDto: UserInput!): User!
  updateUser(entityDto: UserInput!, id: Int!): User!
  login(loginInput: LoginInput!): AuthPayload!
  register(registerInput: RegisterInput!): AuthPayload!
  createPost(postDto: PostInput!): Post!
  updatePost(entityDto: PostInput!, id: Int!): Post!
}

type PaginationDto {
  count: Int!
  limit: Int!
  offset: Int!
}

input PaginationInput {
  limit: Int!
  offset: Int!
}

type Post {
  id: Int!
  title: String!
  body: String!
  authorId: Int!
}

type PostEntitiesListRes {
  filter: PostsFilterType
  rows: [Post!]
  sorting: SortingType
  pagination: PaginationDto
}

input PostInput {
  title: String!
  body: String!
}

input PostsFilterInput {
  authorId: Int!
}

type PostsFilterType {
  authorId: Int!
}

type Query {
  findAllUser(pagination: PaginationInput!, sorting: SortingInput!, filter: UsersFilterInput): UserEntitiesListRes!
  getUser(id: Int!): User!
  findAllPost(pagination: PaginationInput!, sorting: SortingInput!, filter: PostsFilterInput): PostEntitiesListRes!
  getPost(id: Int!): Post!
}

input RegisterInput {
  email: String!
  username: String!
  password: String!
}

input SortingInput {
  prop: String!
  direction: String!
}

type SortingType {
  prop: String!
  direction: String!
}

type User {
  id: Int!
  username: String!
  email: String!
  posts: [Post!]!
}

type UserEntitiesListRes {
  filter: UsersFilterType
  rows: [User!]
  sorting: SortingType
  pagination: PaginationDto
}

input UserInput {
  email: String!
  username: String!
  password: String!
}

input UsersFilterInput {
  email: String!
}

type UsersFilterType {
  email: String!
}
